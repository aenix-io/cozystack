diff --git a/cmd/kubeapps-apis/plugins/fluxv2/packages/v1alpha1/server.go b/cmd/kubeapps-apis/plugins/fluxv2/packages/v1alpha1/server.go
index 53fac6474..4602a1148 100644
--- a/cmd/kubeapps-apis/plugins/fluxv2/packages/v1alpha1/server.go
+++ b/cmd/kubeapps-apis/plugins/fluxv2/packages/v1alpha1/server.go
@@ -5,6 +5,7 @@ package main
 
 import (
 	"context"
+	"encoding/json"
 	"fmt"
 	"net/http"
 
@@ -16,7 +17,6 @@ import (
 	helmv2beta2 "github.com/fluxcd/helm-controller/api/v2beta2"
 	sourcev1beta2 "github.com/fluxcd/source-controller/api/v1beta2"
 	authorizationv1 "k8s.io/api/authorization/v1"
-	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	"k8s.io/apimachinery/pkg/runtime"
 	"k8s.io/apimachinery/pkg/runtime/schema"
 	"k8s.io/apimachinery/pkg/types"
@@ -28,12 +28,16 @@ import (
 	"github.com/vmware-tanzu/kubeapps/cmd/kubeapps-apis/gen/plugins/fluxv2/packages/v1alpha1"
 	"github.com/vmware-tanzu/kubeapps/cmd/kubeapps-apis/plugins/fluxv2/packages/v1alpha1/cache"
 	"github.com/vmware-tanzu/kubeapps/cmd/kubeapps-apis/plugins/fluxv2/packages/v1alpha1/common"
-	"github.com/vmware-tanzu/kubeapps/cmd/kubeapps-apis/plugins/pkg/clientgetter"
 	"github.com/vmware-tanzu/kubeapps/cmd/kubeapps-apis/plugins/pkg/paginate"
 	"github.com/vmware-tanzu/kubeapps/cmd/kubeapps-apis/plugins/pkg/pkgutils"
-	"github.com/vmware-tanzu/kubeapps/cmd/kubeapps-apis/plugins/pkg/resourcerefs"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	log "k8s.io/klog/v2"
 	ctrlclient "sigs.k8s.io/controller-runtime/pkg/client"
+
+	"github.com/vmware-tanzu/kubeapps/cmd/kubeapps-apis/plugins/pkg/clientgetter"
+	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
+	"k8s.io/client-go/discovery/cached/memory"
+	"k8s.io/client-go/restmapper"
 )
 
 // Compile-time statement to ensure this service implementation satisfies the core packaging API
@@ -135,6 +139,7 @@ func NewServer(configGetter core.KubernetesConfigGetter, kubeappsCluster string,
 			if err != nil {
 				log.Fatalf("%s", err)
 			}
+
 			return &Server{
 				clientGetter:               clientProvider,
 				serviceAccountClientGetter: backgroundClientGetter,
@@ -462,36 +467,84 @@ func (s *Server) DeleteInstalledPackage(ctx context.Context, request *connect.Re
 // resources created by an installed package.
 func (s *Server) GetInstalledPackageResourceRefs(ctx context.Context, request *connect.Request[corev1.GetInstalledPackageResourceRefsRequest]) (*connect.Response[corev1.GetInstalledPackageResourceRefsResponse], error) {
 	pkgRef := request.Msg.GetInstalledPackageRef()
-	identifier := pkgRef.GetIdentifier()
-	log.InfoS("+fluxv2 GetInstalledPackageResourceRefs", "cluster", pkgRef.GetContext().GetCluster(), "namespace", pkgRef.GetContext().GetNamespace(), "id", identifier)
+	log.InfoS("+fluxv2 GetInstalledPackageResourceRefs", "cluster", pkgRef.GetContext().GetCluster(), "namespace", pkgRef.GetContext().GetNamespace(), "id", pkgRef.GetIdentifier())
 
-	key := types.NamespacedName{Namespace: pkgRef.Context.Namespace, Name: identifier}
-	rel, err := s.getReleaseInCluster(ctx, request.Header(), key)
+	// Getting dynamic client
+	dynamicClient, err := s.clientGetter.Dynamic(request.Header(), pkgRef.GetContext().GetCluster())
 	if err != nil {
+		log.Errorf("Failed to get dynamic client: %v", err)
 		return nil, err
 	}
-	hrName := helmReleaseName(key, rel)
-	refs, err := resourcerefs.GetInstalledPackageResourceRefs(request.Header(), hrName, s.actionConfigGetter)
+
+	// Getting Discovery Client to work with RESTMapper
+	discoveryClient, err := s.clientGetter.Typed(request.Header(), pkgRef.GetContext().GetCluster())
 	if err != nil {
+		log.Errorf("Failed to create discovery client: %v", err)
 		return nil, err
-	} else {
-		return connect.NewResponse(
-			&corev1.GetInstalledPackageResourceRefsResponse{
-				Context: &corev1.Context{
-					Cluster: s.kubeappsCluster,
-					// TODO (gfichtenholt) it is not specifically called out in the spec why there is a
-					// need for a Context in the response and MORE imporantly what the value of Namespace
-					// field should be. In particular, there is use case when Flux Helm Release in
-					// installed in ns1 but specifies targetNamespace as test2. Should we:
-					//  (a) return ns1 (the namespace where CRs are installed) OR
-					//  (b) return ns2 (the namespace where flux installs the resources specified by the
-					//    release).
-					// For now lets use (a)
-					Namespace: key.Namespace,
-				},
-				ResourceRefs: refs,
-			}), nil
 	}
+	mapper := restmapper.NewDeferredDiscoveryRESTMapper(memory.NewMemCacheClient(discoveryClient.Discovery()))
+
+	// Getting the role
+	roleGVR := schema.GroupVersionResource{Group: "rbac.authorization.k8s.io", Version: "v1", Resource: "roles"}
+	roleName := fmt.Sprintf("%s-dashboard-resources", pkgRef.GetIdentifier())
+	namespace := pkgRef.GetContext().GetNamespace()
+	role, err := dynamicClient.Resource(roleGVR).Namespace(namespace).Get(ctx, roleName, metav1.GetOptions{})
+	if err != nil {
+		log.Errorf("Failed to get role %s: %v", roleName, err)
+		return nil, connect.NewError(connect.CodeInvalidArgument, fmt.Errorf("Unable to get role %s: %w", roleName, err))
+	}
+
+	// Logging Role content for debugging
+	roleContent, _ := json.Marshal(role)
+	log.Infof("Role content: %s", string(roleContent))
+
+	// Parsing rules from Role and creating ResourceRefs
+	resourcesFromRole := make([]*corev1.ResourceRef, 0)
+	rules, found, _ := unstructured.NestedSlice(role.Object, "rules")
+	if !found {
+		log.Errorf("No rules found in role %s", roleName)
+		return nil, connect.NewError(connect.CodeInternal, fmt.Errorf("No rules found in role %s", roleName))
+	}
+
+	for _, rule := range rules {
+		r := rule.(map[string]interface{})
+		resources, _ := r["resources"].([]interface{})
+		apiGroups, _ := r["apiGroups"].([]interface{})
+
+		for _, resource := range resources {
+			resourceStr := resource.(string)
+			for _, apiGroup := range apiGroups {
+				apiGroupStr := apiGroup.(string)
+
+				// Using GroupVersionResource to get GroupVersionKind
+				gvr := schema.GroupVersionResource{Group: apiGroupStr, Version: "v1", Resource: resourceStr}
+				gvk, err := mapper.KindFor(gvr)
+				if err != nil {
+					log.Errorf("Failed to get GroupVersionKind for GVR %v: %v", gvr, err)
+					continue
+				}
+
+				resourceNames, _ := r["resourceNames"].([]interface{})
+				for _, resourceName := range resourceNames {
+					resourceNameStr := resourceName.(string)
+					resourcesFromRole = append(resourcesFromRole, &corev1.ResourceRef{
+						ApiVersion: gvk.GroupVersion().String(),
+						Kind:       gvk.Kind,
+						Name:       resourceNameStr,
+						Namespace:  namespace,
+					})
+				}
+			}
+		}
+	}
+
+	return connect.NewResponse(&corev1.GetInstalledPackageResourceRefsResponse{
+		Context: &corev1.Context{
+			Cluster:   s.kubeappsCluster,
+			Namespace: namespace,
+		},
+		ResourceRefs: resourcesFromRole,
+	}), nil
 }
 
 func (s *Server) AddPackageRepository(ctx context.Context, request *connect.Request[corev1.AddPackageRepositoryRequest]) (*connect.Response[corev1.AddPackageRepositoryResponse], error) {
