{{- $cozyConfig := lookup "v1" "ConfigMap" "cozy-system" "cozystack" }}
{{- $issuerType := (index $cozyConfig.data "clusterissuer") | default "http01" }}

{{- $myNS := lookup "v1" "Namespace" "" .Release.Namespace }}
{{- $ingress := index $myNS.metadata.annotations "namespace.cozystack.io/ingress" }}
{{- $host := index $myNS.metadata.annotations "namespace.cozystack.io/host" }}
---
apiVersion: grafana.integreatly.org/v1beta1
kind: Grafana
metadata:
  name: grafana
  labels:
    dashboards: grafana
spec:
  config:
    log:
      mode: "console"
    auth:
      disable_login_form: "false"
    database:
      type: postgres
      name: ${GF_DATABASE_NAME}
      host: ${GF_DATABASE_HOST}
      user: ${GF_DATABASE_USER}
      password: ${GF_DATABASE_PASSWORD}
      #ssl_mode: require
    server:
      root_url: "https://{{ printf "grafana.%s" (.Values.host | default $host) }}"
    security:
      admin_user: user
      admin_password: ${GF_PASSWORD}
    plugins:
      allow_loading_unsigned_plugins: "victoriametrics-logs-datasource"
  deployment:
    spec:
      replicas: 2
      template:
        spec:
          containers:
            - name: grafana
              image: "{{ $.Files.Get "images/grafana.tag" | trim }}"
              securityContext:
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: false
              readinessProbe:
                failureThreshold: 3
              env:
              #- name: GF_INSTALL_PLUGINS
              #  value: grafana-worldmap-panel,natel-discrete-panel
              - name: GF_PATHS_PLUGINS
                value: /var/lib/grafana-plugins
              - name: ONCALL_API_URL
                value: http://grafana-oncall-engine:8080
              - name: GF_DATABASE_HOST
                value: "grafana-db-rw:5432"
              - name: GF_DATABASE_PASSWORD
                valueFrom: { secretKeyRef: { name: grafana-db-app, key: password } }
              - name: GF_DATABASE_NAME
                value: "app"
              - name: GF_DATABASE_USER
                value: "app"
              - name: GF_PASSWORD
                valueFrom: { secretKeyRef: { name: grafana-admin-password, key: password } }
              - name: GF_SECURITY_ADMIN_USER
                valueFrom:
                  secretKeyRef:
                    key: user
                    name: grafana-admin-password
              - name: GF_SECURITY_ADMIN_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: password
                    name: grafana-admin-password
  ingress:
    metadata:
      annotations:
        {{- if ne $issuerType "cloudflare" }}
        acme.cert-manager.io/http01-ingress-class: "{{ $ingress }}"
        {{- end }}
        cert-manager.io/cluster-issuer: letsencrypt-prod
    spec:
      ingressClassName: "{{ $ingress }}"
      rules:
        - host: "{{ printf "grafana.%s" (.Values.host | default $host) }}"
          http:
            paths:
              - backend:
                  service:
                    name: grafana-service
                    port:
                      number: 3000
                path: /
                pathType: Prefix
      tls:
      - hosts:
        - "{{ printf "grafana.%s" (.Values.host | default $host) }}"
        secretName: grafana-ingress-tls
---
apiVersion: cozystack.io/v1alpha1
kind: WorkloadMonitor
metadata:
  name: grafana
spec:
  replicas: 2
  minReplicas: 1
  kind: monitoring
  type: grafana
  selector:
    app: grafana
  version: {{ $.Chart.Version }}
